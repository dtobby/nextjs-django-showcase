version: '3.8' # Specifies the Compose file version

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine # Use official PostgreSQL image (version 15, alpine variant for smaller size)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data using a named volume
    environment:
      # Define environment variables for the database
      # CHANGE THESE VALUES for production, but fine for local dev
      - POSTGRES_DB=product_showcase_db
      - POSTGRES_USER=product_user
      - POSTGRES_PASSWORD=product_password
    ports:
      # Map port 5433 on your host machine to port 5432 in the container
      # Using 5433 avoids conflicts if you have PostgreSQL installed locally on 5432
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Django Backend Service
  backend:
    build:
      context: ./backend # Directory containing the Dockerfile and source code
      dockerfile: Dockerfile # Specify the Dockerfile name (optional if named Dockerfile)
    # command: python manage.py runserver 0.0.0.0:8000 # Command to run (already default in Dockerfile for dev)
    volumes:
      # Mount the backend code directory from host into container
      # This allows code changes to reflect without rebuilding the image (hot-reloading)
      - ./backend:/app
    ports:
      # Map port 8000 on your host to port 8000 in the container
      - "8000:8000"
    environment:
      # Pass database connection details to Django
      - DB_NAME=product_showcase_db
      - DB_USER=product_user
      - DB_PASSWORD=product_password
      - DB_HOST=db # Use the service name 'db' as the hostname
      - DB_PORT=5432 # Port inside the Docker network
      - DJANGO_SECRET_KEY=very_secret_dev_key_change_me_later # Change this later
      - DJANGO_DEBUG=True # Enable Django debug mode for development
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000 # Allow frontend origin
    depends_on:
      db: # Ensures the database container is started and healthy before the backend starts
        condition: service_healthy

  # Next.js Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      # Mount frontend code directory for hot-reloading
      - ./frontend:/app
      # Important: Prevent the node_modules on the host from overwriting the one in the container
      # This is needed because node_modules can contain platform-specific binaries
      - /app/node_modules
    ports:
      # Map port 3000 on your host to port 3000 in the container
      - "3000:3000"
    environment:
      # Variable accessible by Next.js during build/runtime if needed (prefixed with NEXT_PUBLIC_)
      # Example: Tell Next.js where the backend API is running inside docker network
      - NEXT_PUBLIC_API_URL=http://backend:8000/api # Example API endpoint
      # Ensure Next.js hot reload works well with Docker
      - WATCHPACK_POLLING=true
    depends_on:
      - backend # Wait for backend to start (optional, but good practice)

# Define named volumes (used by 'db' service)
volumes:
  postgres_data: